1. POP

```ts
type Pop<T extends any[]> = T extends [...arg: infer P, last: any] ? P : never;
```
https://github.com/type-challenges/type-challenges/blob/master/questions/16-medium-pop/README.md

2. Promise.all

```ts

declare function PromiseAll<T extends any[]>(values: readonly[...T]):
  Promise<{[key in keyof T]: T[key] extends Promise<infer I> ? I : T[key]}>
```

3. lookup
```ts
type LookUp<U, T extends string> = 
  U extends {'type': T} ? U : never;

```

4. trimLeft
```ts
type TrimLeft<S extends string> = S extends `${' ' | '\n' | '\t'}${infer R}`? TrimLeft<R> : S;
```
